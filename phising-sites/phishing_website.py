# -*- coding: utf-8 -*-
"""Phishing website.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F5Qrj34tolaKdnaN65EGwQ38TagynxTf
"""
import pandas as pd 

import numpy as np 
import pandas as pd 
from time import perf_counter
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.naive_bayes import BernoulliNB
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
import joblib


path="./dataset.csv"
df=pd.read_csv(path)
df['Result']=df['Result'].replace(-1,0)
X= df.drop(columns='Result')
Y=df['Result']

train_X,test_X,train_Y,test_Y=train_test_split(X,Y,test_size=0.3,random_state=2)

"""LR"""

start = perf_counter()
logreg=LogisticRegression(solver='liblinear')
logreg=logreg.fit(train_X,train_Y)
prediction=logreg.predict(test_X)
accuracy_score(prediction,test_Y)
Accuracy = [accuracy_score(prediction, test_Y)]

duration = perf_counter() - start
duration = round(duration,2)
Duration = [duration]

"""BNB"""
start = perf_counter()
clf = BernoulliNB()
clf.fit(train_X, train_Y)
naive_predict=clf.predict(test_X)
accuracy_score(naive_predict,test_Y)
Accuracy.append(accuracy_score(naive_predict,test_Y))

duration = perf_counter() - start
duration = round(duration,2)
Duration.append(duration)

start = perf_counter()
forest_clf = RandomForestClassifier(max_depth=10, random_state=0)
forest_clf.fit(train_X,train_Y)
ran_pred=forest_clf.predict(test_X)
accuracy_score(ran_pred,test_Y)
Accuracy.append(accuracy_score(ran_pred,test_Y))

duration = perf_counter() - start
duration = round(duration,2)
Duration.append(duration)

start = perf_counter()
tree = DecisionTreeClassifier(criterion='entropy') # function to measure the quality of split 
tree.fit(train_X,train_Y)
score = cross_val_score(tree, X, Y, cv= 10)
# print(score)
# print(score.mean())
y_pred = tree.predict(test_X)
Accuracy.append(accuracy_score(y_pred,test_Y))
# print(Accuracy[3])

duration = perf_counter() - start
duration = round(duration,2)
Duration.append(duration)
# print(Duration[3])

model=["LogisticRegression", "BernoulliNB","RandomForestClassifier", "DecisionTreeClassifier"]
models_acc = [[model[i],Accuracy[i],Duration[i]] for i in range(4)]
df_acc = pd.DataFrame(models_acc)
df_acc.columns = ['Model', 'Accuracy', 'Training time (sec)']
df_acc.sort_values(by = 'Accuracy', ascending = False, inplace=True)
df_acc.reset_index(drop = True, inplace=True)
df_acc

tree = DecisionTreeClassifier(criterion='entropy') # function to measure the quality of split 
tree.fit(train_X,train_Y)
y_pred = tree.predict(test_X)

# def display_result(df):
#     for i in range (0,20,4):
#         msg = df.drop(columns='Result')
#         label = df["Result"].iloc[i]
#         pred_label = tree.predict(msg)
#         print(f"Real: {label}, Predicted: {pred_label[i]}")
#         loaded_score = tree.score(msg, df["Result"])
#         print()
#         print()
# display_result(df)

joblib.dump(tree, 'model.pkl')

result = tree.predict([[1,1,-1,1,-1,1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,-1]])
print(result)